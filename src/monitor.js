const readableFormat = require('./lib/readableFormat')
const CappedClient = require('./lib/cappedClient')

module.exports = (pluginContext) => {
  const clipboard = pluginContext.clipboard

  isTransient = () => {
    const badTypes = [
      'de.petermaurer.TransientPasteboardType',
      'com.typeit4me.clipping',
      'Pasteboard generator type',
      'com.agilebits.onepassword',
      'org.nspasteboard.TransientType',
      'org.nspasteboard.ConcealedType',
      'org.nspasteboard.AutoGeneratedType',
    ]
    return badTypes.find((badType) => {
      return clipboard.has(badType)
    })
  }

  getClip = () => {
    const clip = {}
    clip.type = clipboard.readImage().isEmpty() ? 'text' : 'image'

    if (clip.type === 'image') {
      const image = clipboard.readImage()
      const dimensions = image.getSize()
      const size = readableFormat(image.toDataURL().length * 0.75)
      clip.title = `Image: ${dimensions.width}x${dimensions.height} (${size.value}${size.unit})`
      clip.raw = image.toDataURL()
    } else {
      clip.raw = clipboard.readText()
    }
    return clip
  }

  return (env = {}) => {
    if (isTransient()) { return Promise.resolve() }
    const clip = getClip()
    const clipCollection = new CappedClient()
    return clipCollection.last().then((lastClip) => {
      if (!lastClip || lastClip.type !== clip.type || lastClip.raw !== clip.raw) {
        return clipCollection.upsert(clip)
      }
    })
  }
}
